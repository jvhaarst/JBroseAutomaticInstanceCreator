#!/bin/bash

REF_DIR="ref"
BAM_DIR="bam"
GFF_DIR="gff"
VCF_DIR="vcf"
JSON_DIR="json"

R_FOLDER=${DATA_DIR}${DB_NAME}/
R_FOLDER_REF=${R_FOLDER}${REF_DIR}/
R_FOLDER_BAM=${R_FOLDER}${BAM_DIR}/
R_FOLDER_GFF=${R_FOLDER}${GFF_DIR}/
R_FOLDER_VCF=${R_FOLDER}${VCF_DIR}/
R_FOLDER_JSON=${R_FOLDER}${JSON_DIR}/
R_JSON=${R_FOLDER_JSON}${DB_NAME}/
R_FASTA=${R_FOLDER_REF}${REF}



mkdir -p ${R_FOLDER_REF}  || true
mkdir -p ${R_FOLDER_BAM}  || true
mkdir -p ${R_FOLDER_GFF}  || true
mkdir -p ${R_FOLDER_VCF}  || true
mkdir -p ${R_FOLDER_JSON} || true

#chmod 774 ${DATA_DIR}
#chmod 775 ${R_FOLDER}
#chmod 775 ${R_JSON}
#chmod 775 ${TRACKS}


#if [[ ! -e "$R_JSON" ]]; then
#${JBROWSE}/bin/prepare-refseqs.pl \
#    --fasta $R_FASTA \
#    --out   $R_JSON
#fi







mkdir -p ${R_JSON} || true

find ${R_JSON} -type d -exec chmod 777 {} \;

echo "BASE FOLDER"
ls ${R_FOLDER}

echo "BASE FOLDER JSON"
ls ${R_JSON}

TRACKS=${R_JSON}tracks.conf
TRACKLIST=${R_JSON}trackList.json

id -u -n

echo TRACKS ${TRACKS}
#cat ${TRACKS} || true

echo TRACKLIST ${TRACKLIST}
#cat ${TRACKLIST} || true

#chown root ${TRACKS}
#chmod 664  ${TRACKS}
rm -f ${TRACKS} || true






FASTA_LABEL="DNA"
FASTA_KEY="Reference sequence"

if [[ ! -e "${R_FASTA}_data" ]]; then
${JBROWSE}/bin/prepare-refseqs.pl \
    --fasta      ${R_FASTA}      \
    --trackLabel ${FASTA_LABEL}  \
    --key        ${FASTA_KEY}    \
    --out        ${R_FASTA}_data
fi

rm ${R_JSON}seq || true

ln -s ${R_FASTA}_data/seq ${R_JSON}seq

#${JBROWSE}/bin/add-track-json.pl ${R_FASTA}_data/trackList.json ${JBROWSE_DATA}/trackList.json
#cp ${R_FASTA}_data/trackList.json ${JBROWSE_DATA}/trackList.json

${JBROWSE}/bin/json2conf.pl ${R_FASTA}_data/trackList.json >  ${TRACKS}
echo ""                                                    >> ${TRACKS}











source ${DATA_DIR}/gen_reg.scr




cd ${R_FOLDER}




#storeClass: JBrowse/Store/SeqFeature/GFF3
#type      : JBrowse/View/Track/CanvasFeatures
#type      : CanvasFeatures
GFFS=$(find ${GFF_DIR} -name '*.gff' -o -name '*.gff3' -o -name '*.gff.gz'  -o -name '*.gff3.gz' | sort)
INDEX_EXT=
#"tbi"
CLS=""
KEY_EXT=""
TYPE_DIR=${GFF_DIR}

## IF JBROWSE <= 1.12.1
STORE_CLASS="JBrowse/Store/SeqFeature/GFF3"
CANVAS_TYPE="JBrowse/View/Track/CanvasFeatures"

#STORE_CLASS="JBrowse/Store/SeqFeature/NCList"
#CANVAS_TYPE="JBrowse/View/Track/HTMLFeatures"

AS_JSON=1
AS_JSON_TYPE="gff"

## IF JBROWSE > 1.12.1
#STORE_CLASS="JBrowse/Store/SeqFeature/GFF3Tabix"
#CANVAS_TYPE="JBrowse/View/Track/CanvasFeatures"
#AS_JSON=0
#AS_JSON_TYPE=""

CATEGORY="Annotation"
for FILENAME in ${GFFS}; do
    create_register "${INDEX_EXT}" "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}"
done


#[ tracks . volvox_gtf ]
#storeClass = JBrowse/Store/SeqFeature/GTF
#urlTemplate = raw/volvox/volvox.gtf
#type = CanvasFeatures
#metadata.description = This is just all the features in the volvox.gtf test file, which like the volvox.gff3 file, is displayed directly from a web-accessible GTF file
#category = Miscellaneous
#key = GTF - volvox.gtf in-memory adaptor
#style.label = transcript_id,gene_id










VCFS=$(find ${VCF_DIR} -name '*.vcf' -o -name '*.vcf.gz' | sort)
INDEX_EXT="tbi"
CLS=""
KEY_EXT=""
TYPE_DIR=${VCF_DIR}
STORE_CLASS="JBrowse/Store/SeqFeature/VCFTabix"
CANVAS_TYPE="JBrowse/View/Track/CanvasVariants"
CATEGORY="Variants"
AS_JSON=0
AS_JSON_TYPE=""
for FILENAME in ${VCFS}; do
    create_register "${INDEX_EXT}" "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}"
done










BAMS=$(find ${BAM_DIR} -name '*.bam' | sort)
INDEX_EXT="bai"
TYPE_DIR=${BAM_DIR}
STORE_CLASS="JBrowse/Store/SeqFeature/BAM"
AS_JSON=0
AS_JSON_TYPE=""
for FILENAME in ${BAMS}; do
    CANVAS_TYPE="JBrowse/View/Track/Alignments2"
    CLS="BAM"
    KEY_EXT=" - BAM"
    CATEGORY="BAM - Reads"
    create_register "${INDEX_EXT}" "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}"

    CANVAS_TYPE="JBrowse/View/Track/SNPCoverage"
    CLS="COV"
    KEY_EXT=" - Coverage"
    CATEGORY="BAM - Coverage"
    create_register "${INDEX_EXT}" "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}"
done

cd -

touch       ${TRACKS}
echo TRACKS ${TRACKS}
cat         ${TRACKS}









S_PATH=${JBROWSE_DATA#${JBROWSE}}

J_CONF=${JBROWSE}jbrowse.conf

ls -la ${J_CONF}

echo "[datasets.${DB_NAME}]"                            >> ${J_CONF}
echo "url  = ?data=${S_PATH}${DB_NAME}/json/${DB_NAME}" >> ${J_CONF}
echo "name = ${DB_NAME}"                                >> ${J_CONF}
echo ""                                                 >> ${J_CONF}



INDEX_FILES="${INDEX_FILES:-0}"

if [[ ! -z "${INDEX_FILES}" ]]; then
    rm ${TRACKLIST}        || true
    rm -rf ${R_JSON}names  || true

    if [[ "${INDEX_FILES}" == "1" ]]; then
        echo "INDEXING FILES"
        cd ${R_JSON}
        ln -s . data || true
        ${JBROWSE}bin/generate-names.pl --safeMode -v --hashBits 8 --completionLimit 0 --out ${R_JSON}
        cd -
    else
        echo "NOT INDEXING FILES"
    fi
else
    echo "NOT INDEXING FILES"
    mkdir -p ${R_JSON}names || true
    echo "{}" > ${R_JSON}names/meta.json
    echo "{}" > ${R_JSON}names/root.json
    echo "{}" > ${TRACKLIST}
fi











#biodb-to-json.pl -v --conf ${DATA_DIR}/volvox.json --out ${JBROWSE_DATA};
#
#cat ${DATA_DIR}/volvox/volvox_microarray.bw.conf       >> ${JBROWSE_DATA}/tracks.conf
#cat ${DATA_DIR}/volvox/volvox_sine.bw.conf             >> ${JBROWSE_DATA}/tracks.conf
#cat ${DATA_DIR}/volvox/volvox-sorted.bam.conf          >> ${JBROWSE_DATA}/tracks.conf
#cat ${DATA_DIR}/volvox/volvox-sorted.bam.coverage.conf >> ${JBROWSE_DATA}/tracks.conf
#cat ${DATA_DIR}/volvox/volvox-paired.bam.conf          >> ${JBROWSE_DATA}/tracks.conf
#cat ${DATA_DIR}/volvox/volvox.vcf.conf                 >> ${JBROWSE_DATA}/tracks.conf
#cat ${DATA_DIR}/volvox/volvox_fromconfig.conf          >> ${JBROWSE_DATA}/tracks.conf
#cat ${DATA_DIR}/volvox/volvox.gff3.conf                >> ${JBROWSE_DATA}/tracks.conf
#cat ${DATA_DIR}/volvox/volvox.gtf.conf                 >> ${JBROWSE_DATA}/tracks.conf
#
#${JBROWSE}/bin/add-json.pl '{ "dataset_id": "volvox", "include": [ "functions.conf" ] }' \
#    ${JBROWSE_DATA}/trackList.json
#cp ${DATA_DIR}/volvox/functions.conf                  ${JBROWSE_DATA}/functions.conf
#
#generate-names.pl --safeMode -v --out ${JBROWSE_DATA};
#
#if [ ! -e ${JBROWSE_DATA}/raw/volvox ]; then
#    ln -s ${DATA_DIR}/volvox/ ${JBROWSE_DATA}/raw/volvox;
#fi;
#ln -sf ${DATA_DIR}/volvox.json ${JBROWSE_DATA}/raw/;






#cp -ar $R_JSON $J_JSON
#
#gunzip -c \
#      ${JBROWSE_DATA}/yeast_scaffolds/chr1.fa.gz \
#      ${JBROWSE_DATA}/raw/yeast_scaffolds/chr2.fa.gzip \
#    > ${JBROWSE_DATA}/raw/yeast_chr1+2/yeast.fa;
#
#bin/biodb-to-json.pl \
#    --conf ${JBROWSE_DATA}/raw/${DB_NAME}.json \
#    --out  ${JBROWSE_DATA}/json/${DB_NAME}/;
#
#bin/add-json.pl \
#    '{ "dataset_id": "'${DB_NAME}'" }' \
#    ${JBROWSE_DATA}/json/${DB_NAME}/trackList.json
#
#bin/generate-names.pl --dir ${JBROWSE_DATA}/json/${DB_NAME}/;


