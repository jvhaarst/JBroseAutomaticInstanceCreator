#!/bin/bash
set -xeu

#Usage:
#      flatfile-to-json.pl                                                         \
#          ( --gff <GFF3 file> | --bed <BED file> | --gbk <GenBank file> )         \
#          --trackLabel <track identifier>                                         \
#          [ --trackType <JS Class> ]                                              \
#          [ --out <output directory> ]                                            \
#          [ --key <human-readable track name> ]                                   \
#          [ --className <CSS class name for displaying features> ]                \
#          [ --urltemplate "http://example.com/idlookup?id={id}" ]                 \
#          [ --arrowheadClass <CSS class> ]                                        \
#          [ --noSubfeatures ]                                                     \
#          [ --subfeatureClasses '{ JSON-format subfeature class map }' ]          \
#          [ --clientConfig '{ JSON-format style configuration for this track }' ] \
#          [ --config '{ JSON-format extra configuration for this track }' ]       \
#          [ --thinType <BAM -thin_type> ]                                         \
#          [ --thicktype <BAM -thick_type>]                                        \
#          [ --type <feature types to process> ]                                   \
#          [ --nclChunk <chunk size for generated NCLs> ]                          \
#          [ --compress ]                                                          \
#          [ --sortMem <memory in bytes to use for sorting> ]                      \
#          [ --maxLookback <maximum number of features to buffer in gff3 files> ]  \
#          [ --nameAttributes "name,alias,id" ]                                    \


function create_register_json {
    CLS=$1
    KEY_EXT=$2
    TYPE_DIR=$3
    STORE_CLASS=$4
    CANVAS_TYPE=$5
    AS_JSON=$6
    AS_JSON_TYPE=$7
    CATEGORY=$8
    FILENAME=$9
    BN=$10
    DN=$11
    LBL=$12
    CAT=$13
    EXTRA=$14

    CATJSON="{ \"metadata\": { \"category\": \"${CAT}\" }"

    if [[ ! -z "${EXTRA}" ]]; then
        CATJSON="${CATJSON}, ${EXTRA}"
    fi

    CATJSON="${CATJSON} }"

    if [[ ! -e "${FILENAME}_data" ]]; then
        if [[ "${FILENAME}" == *.gz ]]; then
            ${JBROWSE}bin/flatfile-to-json.pl --${AS_JSON_TYPE} <(gunzip -c "${FILENAME}") --config "${CATJSON}" --trackType "${CANVAS_TYPE}" --trackLabel "${LBL}" --out "${FILENAME}_data"
        else
            ${JBROWSE}bin/flatfile-to-json.pl --${AS_JSON_TYPE} "${FILENAME}"              --config "${CATJSON}" --trackType "${CANVAS_TYPE}" --trackLabel "${LBL}" --out "${FILENAME}_data"
        fi
    fi

    if [[ ! -d "${R_JSON}tracks" ]]; then
        mkdir ${R_JSON}tracks
    fi

    rm ${R_JSON}tracks/${DN}_${BN} 2>/dev/null || true

    ln -s ${R_FOLDER}${FILENAME}_data/tracks/${DN}_${BN}/ ${R_JSON}tracks/${DN}_${BN}

    #${JBROWSE}/bin/add-track-json.pl ${R_FOLDER}${FILENAME}_data/trackList.json ${JBROWSE_DATA}/trackList.json
    #${JBROWSE}/bin/add-json.pl  ${JBROWSE_DATA}/trackList.json

    ${JBROWSE}/bin/json2conf.pl ${R_FOLDER}${FILENAME}_data/trackList.json | grep -v 'formatVersion' >> ${TRACKS}
    echo ""                                                                                          >> ${TRACKS}
}

function create_register_conf {
    CLS=$1
    KEY_EXT=$2
    TYPE_DIR=$3
    STORE_CLASS=$4
    CANVAS_TYPE=$5
    AS_JSON=$6
    AS_JSON_TYPE=$7
    CATEGORY=$8
    FILENAME=$9
    BN=$10
    DN=$11
    LBL=$12
    CAT=$13
    EXTRA=$14

    echo "[ tracks.${DN}${LBL}${CLS} ]"                    >> ${TRACKS}
    echo "storeClass     = ${STORE_CLASS}"                 >> ${TRACKS}
    echo "urlTemplate    = ../../${FILENAME}"              >> ${TRACKS}
    echo "category       = ${CAT}"                         >> ${TRACKS}
    echo "type           = ${CANVAS_TYPE}"                 >> ${TRACKS}
    echo "key            = ${LBL}${KEY_EXT}"               >> ${TRACKS}
    if [[ "${INDEX_EXT}" == "bai" ]]; then
    echo "baiUrlTemplate = ../../${FILENAME}.${INDEX_EXT}" >> ${TRACKS}
    fi
    if [[ ! -z "${EXTRA}" ]]; then
    echo "${EXTRA}"                                        >> ${TRACKS}
    fi
    echo ""                                                >> ${TRACKS}
    # metadata.Description = SNP/Coverage view of volvox-sorted.bam, simulated resequencing alignments.
}


function parse_register {
    CLS=$1
    KEY_EXT=$2
    TYPE_DIR=$3
    STORE_CLASS=$4
    CANVAS_TYPE=$5
    AS_JSON=$6
    AS_JSON_TYPE=$7
    CATEGORY=$8
    FILENAME=$9

    echo FILENAME ${FILENAME}

    BN=$(basename ${FILENAME})
    DN=$(dirname  ${FILENAME} | sed -s "s/${TYPE_DIR}\/*//")

    CAT="${CATEGORY}"
    if [[ "${DN}" != "" ]]; then
        CAT="${CATEGORY} - ${DN}"
    fi

    LBL=${BN}
    EXTRA=""
    if [[ -f "${FILENAME}.nfo" ]]; then source ${FILENAME}.nfo; fi

    echo "BN '${BN}' DN '${DN}' LBL '${LBL}' CAT '${CAT}'"

    if [[ -z "${AS_JSON}" ]]; then
        create_register_json "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}" "${BN}" "${DN}" "${LBL}" "${CAT}" "${EXTRA}"
    else
        create_register_conf "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}" "${BN}" "${DN}" "${LBL}" "${CAT}" "${EXTRA}"
    fi
}


#create_register "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}"
function create_register {
    CLS=$1
    KEY_EXT=$2
    TYPE_DIR=$3
    STORE_CLASS=$4
    CANVAS_TYPE=$5
    AS_JSON=$6
    AS_JSON_TYPE=$7
    CATEGORY=$8
    FILENAME=$9

    if [[ -f "${FILENAME}"              ]]; then
        echo "FILE ${FILENAME} EXISTS"
        if [[ ! -z "${INDEX_EXT}"           ]]; then
            echo "HAS INDEX"
            if [[ -f "${FILENAME}.${INDEX_EXT}" ]]; then
                echo "${FILENAME} INDEX EXISTS"
                parse_register "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}"
            else
                echo "${FILENAME} INDEX DOES NOT EXISTS"
            fi
        else
            echo "DOES NOT HAVE INDEX"
            parse_register "${CLS}" "${KEY_EXT}" "${TYPE_DIR}" "${STORE_CLASS}" "${CANVAS_TYPE}" "${AS_JSON}" "${AS_JSON_TYPE}" "${CATEGORY}" "${FILENAME}"
        fi
    else
        echo "FILE ${FILENAME} DOES NOT EXISTS"
    fi
}
